{"version":3,"sources":["webpack:///./src/components/primatives/button.tsx","webpack:///./src/components/primatives/modal.tsx","webpack:///./src/components/form-components/form-util.ts","webpack:///./src/components/form-components/counter.tsx","webpack:///./src/components/form-components/radio.tsx","webpack:///./src/components/form-components/switch.tsx","webpack:///./src/components/form-components/checkbox.tsx","webpack:///./src/components/form-components/slider.tsx","webpack:///./src/components/form-components/display-fields.tsx","webpack:///./src/components/form-components/display-values.tsx","webpack:///./src/components/form-components/form-template.tsx"],"names":["Button","Object","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__","target","props","theme","primary","red","ModalOverlay","name","styles","ModalPaper","Modal","_ref","onClose","children","ref","useRef","handler","useEffect","listener","event","current","contains","document","addEventListener","removeEventListener","useOnClickOutside","useLayoutEffect","body","style","overflow","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","initiallizeFormState","fields","keys","map","f","reduce","acc","val","concat","state","field","_Object$assign","_Object$assign2","_Object$assign3","_Object$assign4","_Object$assign5","_Object$assign6","_Object$assign7","dropped","assign","Grouping","_ref8","setFieldValue","values","core_browser_esm","css","_ref7","_ref9","_ref6","_ref5","primatives_button","type","onClick","parseInt","_ref4","md","_ref3","_ref10","Counter","_ref11","_ref12","counter_ref2","extends_default","counter_ref","_ref13","Radio","radio_ref5","radio_ref4","radio_ref3","options","option","radio_ref2","key","radio_ref","onChange","value","checked","GlobalContainer","styled_base_browser_esm","InputContainer","width","height","Input","Slider","highlight","light","sliderHeight","sliderWidth","shadow","Switch","csvToArray","str","split","arrayToCsv","strA","join","updateValues","checkboxValue","valuesArray","includes","filter","v","CheckboxGroup","checkbox_ref2","checkbox_ref3","SliderWithToolTip","createSliderWithTooltip","FormSlider","max","step","marks","min","slider_ref2","trackStyle","backgroundColor","handleStyle","borderColor","dots","slider_ref3","DisplayFields","_ref2","react_default","a","Fragment","display_fields_ref","formik_esm","component","test","placeholder","DisplayValues","react_table_es","data","property","defaultPageSize","showPagination","display_values_ref2","columns","Header","accessor","minWidth","Cell","toString","FormTemplate","submitUrl","storageKey","initialModalState","modalOpen","error","showValues","_useState","useState","modalState","setModalState","ModalContent","isSubmitting","display_values","initialValues","onSubmit","actions","axios","post","JSON","stringify","headers","content-type","then","r","localforage","getItem","err","items","console","log","setItem","submitted","id","uuid","catch","setSubmitting","resetForm","handleSubmit","_templateObject","gamePhase","_templateObject2","_templateObject3","rhythm","modal","disabled"],"mappings":"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","file":"3-f7d05bc75ad90be284da.js","sourcesContent":["import styled from \"@emotion/styled\"\n\ninterface ButtonProps {\n  primary: boolean\n}\nconst Button = styled.button`\n  min-width: 2rem;\n  padding: 6px 16px;\n  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.1), 0 6px 20px 0 rgba(0, 0, 0, 0.09);\n  border: 2px solid ${props => props.theme.primary.red};\n  border-radius: 4px;\n  outline: none;\n  font-size: 14px;\n  text-decoration: none;\n  background: none;\n  color: #c41e3a;\n  &:active {\n    background-color: ${props => props.theme.primary.red};\n    color: white;\n  }\n`\n\nexport default Button\n","import React, { useEffect, useRef, useLayoutEffect } from \"react\"\nimport styled from \"@emotion/styled\"\n\nconst ModalOverlay = styled.div`\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(0, 0, 0, 0.65);\n  display: flex;\n  padding: 1em;\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n`\nconst ModalPaper = styled.div`\n  background-color: white;\n  border-radius: 3px;\n  padding: 1rem 2rem;\n  text-align: center;\n  overflow: visible;\n  max-height: 100vh;\n  overflow-y: auto;\n`\n\n// Hooks\nfunction useOnClickOutside(\n  ref: React.RefObject<HTMLDivElement>,\n  handler: (a: any) => void\n) {\n  useEffect(() => {\n    const listener = (event: Event) => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target as Node)) {\n        return\n      }\n\n      handler(event)\n    }\n\n    document.addEventListener(\"mousedown\", listener)\n    document.addEventListener(\"touchstart\", listener)\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listener)\n      document.removeEventListener(\"touchstart\", listener)\n    }\n  }, []) // Empty array ensures that effect is only run on mount and unmount\n}\nfunction useLockBodyScroll() {\n  useLayoutEffect(() => {\n    // Prevent scrolling on mount\n    document.body.style.overflow = \"hidden\"\n    // Re-enable scrolling when component unmounts\n    return () => (document.body.style.overflow = \"visible\")\n  }, []) // Empty array ensures effect is only run on mount and unmount\n}\nexport default function Modal({\n  onClose,\n  children,\n}: {\n  onClose: () => void\n  children: React.ReactNode\n}) {\n  const ref = useRef(null)\n  useOnClickOutside(ref, () => onClose())\n  useLockBodyScroll()\n  return (\n    <ModalOverlay>\n      <ModalPaper ref={ref}>{children}</ModalPaper>\n    </ModalOverlay>\n  )\n}\n","import * as Yup from \"yup\"\nimport { Fields } from \"../../utils/game-constants\"\nexport const initiallizeFormState = (fields: Fields): { [s: string]: any } =>\n  Object.keys(fields)\n    .map(f => fields[f]) // map out the fields into [[fields]]\n    .reduce((acc, val) => acc.concat(val), []) // flattens the array\n    .reduce((state, field) => {\n      if (typeof field === \"object\") {\n        switch (field[\"type\"]) {\n          case \"Number\":\n            return field.dropped\n              ? {\n                  ...state,\n                  [field[\"field-name\"]]: 0,\n                  [field[\"field-name\"] + \" dropped\"]: 0,\n                }\n              : {\n                  ...state,\n                  [field[\"field-name\"]]: 0,\n                }\n          case \"Radio\":\n            return {\n              ...state,\n              [field[\"field-name\"]]: field[\"options\"]\n                ? field[\"options\"][0]\n                : \"none-selected\",\n            }\n          case \"Checkbox\":\n            return {\n              ...state,\n              [field[\"field-name\"]]: \"\",\n            }\n          case \"Switch\":\n            return {\n              ...state,\n              [field[\"field-name\"]]: false,\n            }\n          case \"Slider\":\n            return {\n              ...state,\n              [field[\"field-name\"]]: 0,\n            }\n          default:\n            return state\n        }\n      }\n      if (typeof field === \"string\")\n        return {\n          ...state,\n          [field]: \"\",\n        }\n      return state\n    }, {}) // initializes the form state\n\nexport const createValidateObject = (fields: Fields) => {\n  const shape = Object.keys(fields)\n    .map(f => fields[f])\n    .reduce((acc, val) => acc.concat(val), [])\n    .reduce((vobj, field) => {\n      if (typeof field === \"object\") {\n        switch (field.type) {\n          case \"Number\":\n            return {\n              ...vobj,\n              [field[\"field-name\"]]: Yup.number().min(0),\n            }\n          case \"Radio\":\n            return {\n              ...vobj,\n              [field[\"field-name\"]]: Yup.string().required(),\n            }\n          case \"Switch\":\n            return {\n              ...vobj,\n              [field[\"field-name\"]]: Yup.boolean().required(),\n            }\n        }\n      }\n      return {\n        ...vobj,\n        [field as string]: \"\",\n      }\n    }, {})\n  return Yup.object().shape(shape)\n}\n","import React from \"react\"\nimport Button from \"../primatives/button\"\nimport css from \"@emotion/css\"\nimport { MdArrowUpward, MdArrowDownward } from \"react-icons/md\"\ninterface CounterProps {\n  setFieldValue: (field: string, value: any) => void\n  name: string\n  values: {\n    [s: string]: string\n  }\n  dropped: boolean\n}\nfunction Grouping({ setFieldValue, values, dropped, name }: CounterProps) {\n  return (\n    <div\n      css={css`\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        width: 100%;\n        text-align: left;\n      `}\n    >\n      <label css={{ fontWeight: \"bold\" }}>\n        {dropped ? \"Dropped:\" : \"Scored\"}\n      </label>\n      <div\n        css={css`\n          display: flex;\n          flex-direction: row;\n          width: 60%;\n          justify-content: space-between;\n        `}\n      >\n        <div\n          css={css`\n            display: flex;\n            flex-direction: column;\n            width: 50px;\n            height: 84.5px;\n          `}\n        >\n          <Button\n            type=\"button\"\n            onClick={() =>\n              parseInt(values[name]) >= 0\n                ? setFieldValue(name, parseInt(values[name]) + 1)\n                : \"\"\n            }\n            css={css`\n              border-radius: 9px 9px 0 0;\n              border-bottom-width: 0.5px;\n            `}\n          >\n            <MdArrowUpward />\n          </Button>\n\n          <Button\n            type=\"button\"\n            onClick={() =>\n              parseInt(values[name])\n                ? setFieldValue(name, parseInt(values[name]) - 1)\n                : \"\"\n            }\n            css={css`\n              border-radius: 0 0 9px 9px;\n              border-top-width: 0.5px;\n            `}\n          >\n            <MdArrowDownward />\n          </Button>\n        </div>\n        <label css={{ alignSelf: \"center\", justifySelf: \"flex-end\" }}>\n          {values[name] ? values[name] : 0}\n        </label>\n      </div>\n    </div>\n  )\n}\nexport default function Counter(props: CounterProps) {\n  const { name, setFieldValue, values, dropped } = props\n  return (\n    <div\n      css={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        borderWidth: \"5px\",\n        paddingBottom: \"5%\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        maxWidth: \"300px\",\n        width: \"100%\",\n        alignSelf: \"center\",\n        textAlign: \"left\",\n      }}\n    >\n      <label css={{ alignSelf: \"flex-start\" }}>{name}:</label>\n      {dropped ? (\n        <div\n          css={css`\n            display: flex;\n            flex-direction: row;\n            width: 70%;\n            max-width: 300px;\n          `}\n        >\n          <Grouping {...props} dropped={false} />\n          <Grouping {...props} name={`${name} dropped`} />\n        </div>\n      ) : (\n        <div\n          css={css`\n            display: flex;\n            flex-direction: row;\n            justify-content: space-around;\n            width: 50%;\n            max-width: 160px;\n          `}\n        >\n          <Button\n            type=\"button\"\n            onClick={() =>\n              parseInt(values[name]) >= 0\n                ? setFieldValue(name, parseInt(values[name]) + 1)\n                : \"\"\n            }\n          >\n            +\n          </Button>\n          <label css={{ textAlign: \"center\", alignSelf: \"center\" }}>\n            {values[name] ? values[name] : 0}\n          </label>\n          <Button\n            type=\"button\"\n            onClick={() =>\n              parseInt(values[name])\n                ? setFieldValue(name, parseInt(values[name]) - 1)\n                : \"\"\n            }\n          >\n            -\n          </Button>\n        </div>\n      )}\n      <br />\n    </div>\n  )\n}\n","import React from \"react\"\nimport css from \"@emotion/css\"\nimport { FieldProps } from \"formik\"\nconst Radio = (props: FieldProps & { options: string[] }) => (\n  <fieldset\n    css={css`\n      display: inline-flex;\n      position: relative;\n      flex-direction: column;\n      align-items: flex-start;\n      width: 100%;\n      border: 0;\n      max-width: 300px;\n      align-self: center;\n    `}\n  >\n    <legend\n      css={css`\n        text-align: left;\n      `}\n    >\n      {props.field.name}:\n    </legend>\n    <div\n      css={css`\n        display: flex;\n        margin: 8px 0;\n        flex-direction: column;\n      `}\n    >\n      {props.options.map(option => (\n        <label\n          css={css`\n            display: inline-flex;\n            vertical-align: middle;\n            align-items: center;\n          `}\n          key={option}\n        >\n          <span\n            css={css`\n              padding: 12px;\n            `}\n          >\n            <input\n              onChange={props.field.onChange}\n              name={props.field.name}\n              value={option}\n              type=\"radio\"\n              checked={props.field.value === option}\n            />\n          </span>\n          {option} <br />\n        </label>\n      ))}\n    </div>\n  </fieldset>\n)\nexport default Radio\n","import React from \"react\"\nimport { FieldProps } from \"formik\"\nimport styled from \"@emotion/styled\"\n\nconst GlobalContainer = styled.label`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-bottom: 5%;\n`\n\nconst InputContainer = styled.label`\n  position: relative;\n  display: inline-block;\n  width: ${(props: { width: number; height: number }) => props.width}px;\n  height: ${props => props.height}px;\n  > input {\n    display: none;\n  }\n`\n\nconst Input = styled.input`\n  &:checked + span {\n    background-color: ${props => props.theme.primary.red};\n  }\n  &:disabled + span {\n    background-color: ${props => props.theme.primary.red};\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n  &:disabled:checked + span {\n    background-color: ${props => props.theme.primary.red};\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n  &:focus + span {\n    box-shadow: 0 0 1px #2196f3;\n  }\n  &:checked + span:before {\n    -webkit-transform: translateX(26px);\n    -ms-transform: translateX(26px);\n    transform: translateX(26px);\n  }\n`\n\nconst Slider = styled.span`\n  position: absolute;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: ${props => props.theme.highlight.light};\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n  border-radius: 34px;\n  &:before {\n    position: relative;\n    border-radius: 50%;\n    content: \"\";\n    height: ${(props: { sliderHeight: number; sliderWidth: number }) =>\n      props.sliderHeight}px;\n    width: ${props => props.sliderWidth}px;\n    left: 4px;\n    background-color: ${props => props.theme.shadow.light};\n    -webkit-transition: 0.4s;\n    transition: 0.4s;\n  }\n`\n\nexport default function Switch(props: FieldProps) {\n  return (\n    <GlobalContainer>\n      <label> {props.field.name}: &nbsp;</label>\n      <InputContainer width={60} height={34}>\n        <Input\n          onChange={props.field.onChange}\n          name={props.field.name}\n          type=\"checkbox\"\n          value={props.field.value}\n          checked={props.field.value}\n        />\n        <Slider sliderHeight={26} sliderWidth={26} />\n      </InputContainer>\n      <br />\n    </GlobalContainer>\n  )\n}\n","import React from \"react\"\n// TODO: Store checkbox data in csv and not array\nconst csvToArray = (str: string): string[] => str.split(\",\")\nconst arrayToCsv = (strA: string[]): string => strA.join(\",\")\nexport const updateValues = (checkboxValue: string, values: string): string => {\n  const valuesArray = csvToArray(values)\n  if (values === \"\") return checkboxValue\n  if (valuesArray.includes(checkboxValue))\n    return arrayToCsv(valuesArray.filter(v => v !== checkboxValue))\n  return arrayToCsv(valuesArray.concat(checkboxValue))\n}\nexport default function CheckboxGroup({\n  name,\n  options,\n  onChange,\n  value,\n}: {\n  name: string\n  options: string[]\n  onChange: (value: string) => void\n  value: string\n}) {\n  return (\n    <div\n      css={{\n        display: \"inline-flex\",\n        alignItems: \"flex-start\",\n        flexDirection: \"column\",\n        alignSelf: \"center\",\n        width: \"100%\",\n        maxWidth: \"300px\",\n      }}\n    >\n      <label>{name}</label>\n      <br />\n      {options.map(option => (\n        <label css={{ marginLeft: \"10%\" }}>\n          <input\n            type=\"checkbox\"\n            name={name}\n            value={option}\n            checked={csvToArray(value).includes(option)}\n            onChange={() => onChange(updateValues(option, value))}\n          />\n          {option}\n          <br />\n        </label>\n      ))}\n    </div>\n  )\n}\n","import React from \"react\"\nimport Slider, { createSliderWithTooltip } from \"rc-slider\"\nimport theme from \"../../utils/theme\"\nimport \"rc-slider/assets/index.css\"\ninterface FormSliderProps {\n  onChange: (v: any) => void\n  name: string\n  value: string\n  min?: number\n  max: number\n  step: number\n  marks: {\n    [s: string]: string\n  }\n}\nconst SliderWithToolTip = createSliderWithTooltip(Slider)\nexport default function FormSlider({\n  onChange,\n  name,\n  value,\n  max,\n  step,\n  marks,\n  min,\n}: FormSliderProps) {\n  return (\n    <div\n      css={{\n        paddingBottom: \"30px\",\n      }}\n    >\n      <label>{name}</label>\n      <SliderWithToolTip\n        trackStyle={{ backgroundColor: theme.primary.red }}\n        handleStyle={{ borderColor: theme.primary.red }}\n        dots\n        onChange={onChange}\n        value={parseInt(value)}\n        css={{ margin: \"auto\", width: \"50%\" }}\n        max={max}\n        min={min || 0}\n        marks={marks}\n        step={step}\n      />\n    </div>\n  )\n}\n","import React from \"react\"\nimport Counter from \"./counter\"\nimport { Field } from \"formik\"\nimport { FieldType } from \"../../utils/game-constants\"\nimport Radio from \"./radio\"\nimport Switch from \"./switch\"\nimport CheckboxGroup from \"./checkbox\"\nimport css from \"@emotion/css\"\nimport FormSlider from \"./slider\"\n\ninterface DisplayFieldsProps {\n  fields: FieldType[]\n  setFieldValue: (field: string, value: any) => void\n  values: any\n}\nexport default function DisplayFields({\n  fields,\n  setFieldValue,\n  values,\n}: DisplayFieldsProps) {\n  return (\n    <>\n      {fields.map(f => {\n        if (typeof f === \"string\")\n          return (\n            <div\n              css={css`\n                padding-bottom: 15px;\n              `}\n              key={f as string}\n            >\n              <Field\n                component={\n                  f === \"Comments\" || f === \"Recent problems with robot\"\n                    ? \"textarea\"\n                    : \"input\"\n                }\n                type={/Number/.test(f) ? \"number\" : \"text\"}\n                name={f}\n                placeholder={f}\n              />\n              <br />\n            </div>\n          )\n        if (typeof f === \"object\") {\n          switch (f.type) {\n            case \"Number\":\n              return (\n                <Counter\n                  values={values}\n                  setFieldValue={setFieldValue}\n                  name={f[\"field-name\"]}\n                  key={f[\"field-name\"]}\n                  dropped={f.dropped}\n                />\n              )\n            case \"Switch\":\n              return (\n                <Field\n                  component={Switch}\n                  name={f[\"field-name\"]}\n                  key={f[\"field-name\"]}\n                />\n              )\n            case \"Radio\":\n              return (\n                <Field\n                  component={Radio}\n                  name={f[\"field-name\"]}\n                  options={f[\"options\"] as string[]}\n                  key={f[\"field-name\"]}\n                />\n              )\n            case \"Slider\":\n              return (\n                <FormSlider\n                  value={values[f[\"field-name\"]]}\n                  onChange={v => setFieldValue(f[\"field-name\"] as string, v)}\n                  name={f[\"field-name\"]}\n                  max={f.max}\n                  min={f.min}\n                  step={f.step}\n                  marks={f.marks}\n                  key={f[\"field-name\"]}\n                />\n              )\n            case \"Checkbox\":\n              return (\n                <CheckboxGroup\n                  name={f[\"field-name\"]}\n                  options={f.options}\n                  onChange={v => setFieldValue(f[\"field-name\"], v)}\n                  value={values[f[\"field-name\"]]}\n                  key={f[\"field-name\"]}\n                />\n              )\n          }\n        }\n      })}\n    </>\n  )\n}\n","import React from \"react\"\nimport ReactTable from \"react-table\"\nimport \"react-table/react-table.css\"\nconst DisplayValues = ({ values }: { values: { [s: string]: string } }) => (\n  <ReactTable\n    data={Object.keys(values).map(key => ({\n      property: key,\n      value: values[key],\n    }))}\n    defaultPageSize={10}\n    showPagination\n    css={{\n      width: \"100%\",\n      fontSize: \".65rem\",\n    }}\n    columns={[\n      {\n        Header: \"Field Names\",\n        accessor: \"property\",\n        minWidth: 200,\n        style: {\n          overflow: \"visible\",\n        },\n      },\n      {\n        Header: \"Values\",\n        accessor: \"value\",\n        minWidth: 200,\n        Cell(props: { value: string }) {\n          return <div>{props.value.toString()}</div>\n        },\n      },\n    ]}\n  />\n)\nexport default DisplayValues\n","import React, { useState } from \"react\"\nimport { Formik } from \"formik\"\nimport Button from \"../primatives/button\"\nimport { initiallizeFormState } from \"./form-util\"\nimport { css } from \"@emotion/core/\"\nimport DisplayFields from \"./display-fields\"\nimport { Fields } from \"../../utils/game-constants\"\nimport { rhythm } from \"../../utils/typography\"\nimport Modal from \"../primatives/modal\"\nimport DisplayValues from \"./display-values\"\nimport axios from \"axios\"\nimport localforage from \"localforage\"\nimport uuid from \"uuid/v4\"\n\nconst FormTemplate = ({\n  fields,\n  submitUrl,\n  storageKey,\n}: {\n  fields: Fields\n  submitUrl: string\n  storageKey: string\n}) => {\n  const initialModalState = {\n    modalOpen: false,\n    error: false,\n    showValues: true,\n  }\n  const [modalState, setModalState] = useState(initialModalState)\n  const ModalContent = ({\n    isSubmitting,\n    values,\n  }: {\n    isSubmitting: boolean\n    values: any\n  }) => {\n    if (isSubmitting) return <p>loading...</p>\n    if (modalState.showValues) return <DisplayValues values={values} />\n    if (!modalState.error) return <p> Data submitted!</p>\n    if (modalState.error)\n      return (\n        <p>\n          There was an error submitting your form, please try again later(don't\n          worry your values are stored in local storage)\n        </p>\n      )\n  }\n  return (\n    <div>\n      <Formik\n        initialValues={initiallizeFormState(fields)}\n        onSubmit={(\n          values: { \"Event Code\"?: string; [s: string]: any },\n          actions\n        ) => {\n          const proxyurl = \"https://cors-app-scouting.herokuapp.com/\"\n          // function getURL() {\n          //   switch (values[\"Event Code\"]) {\n          //     case \"sfr\":\n          //       return \"https://script.google.com/macros/s/AKfycbxdqDlv5M1Et_yQ4qrANEzwBN0FcrXLQitbKtMYfN84XiKQ_HI4/exec\"\n          //     case \"svr\":\n          //       return \"https://script.google.com/macros/s/AKfycbxd9o5VOvlJT4SqTeJTAoUmT9WNxmagGafiTARnFCyU7bgPlcnR/exec\"\n          //     default:\n          //       return \"https://script.google.com/macros/s/AKfycbw6coSc3fptX7wLepvJ6idwzkEx9uZwxsKMhcfFuWCit-9WZJIO/exec\"\n          //   }\n          // }\n          axios\n            .post(proxyurl + submitUrl, JSON.stringify(values), {\n              headers: { \"content-type\": \"json\" },\n            })\n            .then(r => {\n              setModalState({ ...modalState, showValues: false })\n              localforage.getItem(storageKey, (err, items: any) => {\n                if (err) return console.log(err)\n                console.log(items)\n                if (items === null)\n                  return localforage.setItem(storageKey, [\n                    { ...values, submitted: true, id: uuid() },\n                  ])\n                localforage.setItem(storageKey, [\n                  ...items,\n                  { ...values, submitted: true, id: uuid() },\n                ])\n              })\n            })\n            .catch(() => {\n              setModalState({ ...modalState, showValues: false, error: true })\n              localforage.getItem(storageKey, (err, items: any) => {\n                if (err) return console.log(err)\n                console.log(items)\n                if (items === null)\n                  return localforage.setItem(storageKey, [\n                    { ...values, submitted: false, id: uuid() },\n                  ])\n                localforage.setItem(storageKey, [\n                  ...items,\n                  { ...values, submitted: false, id: uuid() },\n                ])\n              })\n            })\n            .then(() => {\n              actions.setSubmitting(false)\n              actions.resetForm(initiallizeFormState(fields))\n            })\n        }}\n      >\n        {props => (\n          <form\n            onSubmit={props.handleSubmit}\n            css={css`\n              display: flex;\n              flex-direction: column;\n              justify-content: center;\n              align-items: center;\n              text-align: center;\n            `}\n          >\n            {Object.keys(fields).map(gamePhase => (\n              <div\n                css={css`\n                  display: flex;\n                  flex-direction: column;\n                  justify-content: center;\n                  width: 100%;\n                `}\n                key={gamePhase}\n              >\n                <h2\n                  css={css`\n                    margin-top: ${rhythm(1)};\n                  `}\n                >\n                  {gamePhase}\n                </h2>\n                <DisplayFields\n                  fields={fields[gamePhase]}\n                  setFieldValue={props.setFieldValue}\n                  values={props.values}\n                />\n              </div>\n            ))}\n            <Button\n              type=\"button\"\n              onClick={() =>\n                setModalState({\n                  ...modalState,\n                  modalOpen: true,\n                  showValues: true,\n                })\n              }\n            >\n              Confirm\n            </Button>\n            {modalState.modalOpen && (\n              <Modal\n                onClose={() => {\n                  if (!props.isSubmitting) {\n                    setModalState(initialModalState)\n                  }\n                }}\n              >\n                <h1> Confirm </h1>\n                <ModalContent\n                  isSubmitting={props.isSubmitting}\n                  values={props.values}\n                />\n                {!modalState.showValues ? (\n                  <Button onClick={() => setModalState(initialModalState)}>\n                    Close\n                  </Button>\n                ) : (\n                  <Button disabled={props.isSubmitting} type=\"submit\">\n                    Submit\n                  </Button>\n                )}\n              </Modal>\n            )}\n          </form>\n        )}\n      </Formik>\n    </div>\n  )\n}\nexport default FormTemplate\n"],"sourceRoot":""}